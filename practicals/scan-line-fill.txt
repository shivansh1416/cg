import matplotlib.pyplot as plt
import numpy as np

def edge_table(polygon):
    edges = []
    n = len(polygon)
    
    for i in range(n):
        x0, y0 = polygon[i]
        x1, y1 = polygon[(i + 1) % n]
        if y0 != y1:
            if y0 > y1:
                x0, y0, x1, y1 = x1, y1, x0, y0
            edge = {
                'x': x0,
                'y_min': y0,
                'y_max': y1,
                'inv_slope': (x1 - x0) / (y1 - y0)
            }
            edges.append(edge)
    
    return sorted(edges, key=lambda e: e['y_min'])

def scanline_fill(polygon):
    edge_list = edge_table(polygon)
    y_min = min(p[1] for p in polygon)
    y_max = max(p[1] for p in polygon)
    active_edges = []

    pixels = []

    for y in range(y_min, y_max + 1):
        active_edges = [e for e in active_edges if e['y_max'] > y]

        for edge in edge_list:
            if edge['y_min'] == y:
                active_edges.append(edge)

        active_edges.sort(key=lambda e: e['x'])

        fill = False
        intersections = []

        for edge in active_edges:
            intersections.append(edge['x'])
            fill = not fill

        intersections.sort()

        for i in range(0, len(intersections), 2):
            if i + 1 < len(intersections):
                for x in range(int(intersections[i]), int(intersections[i + 1])):
                    pixels.append((x, y))

        for edge in active_edges:
            edge['x'] += edge['inv_slope']
    
    return pixels

# Example usage
polygon = [(50, 150), (200, 50), (350, 150), (350, 300), (250, 300), (200, 250), (150, 350), (100, 250), (100, 200)]

filled_pixels = scanline_fill(polygon)

# Plotting the polygon and filled pixels
fig, ax = plt.subplots()

# Polygon
polygon_path = plt.Polygon(polygon, closed=True, fill=None, edgecolor='r', label='Polygon')
ax.add_patch(polygon_path)

# Filled pixels
x_coords, y_coords = zip(*filled_pixels)
ax.scatter(x_coords, y_coords, color='b', s=1, label='Filled Pixels')

plt.xlim(0, 400)
plt.ylim(0, 400)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scan Line Fill Algorithm')
plt.legend()
plt.grid(True)
plt.gca().set_aspect('equal', adjustable='box')
plt.show()